<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on Kiss&#39;Em!</title>
    <link>https://example.com/tags/c/</link>
    <description>Recent content in c on Kiss&#39;Em!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 28 Dec 2017 21:48:16 +0800</lastBuildDate><atom:link href="https://example.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>c pointer</title>
      <link>https://example.com/note/computerscience/c%E7%BB%93%E6%9E%84%E6%8C%87%E9%92%88%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 28 Dec 2017 21:48:16 +0800</pubDate>
      
      <guid>https://example.com/note/computerscience/c%E7%BB%93%E6%9E%84%E6%8C%87%E9%92%88%E5%9F%BA%E7%A1%80/</guid>
      <description>c语言指针基础知识 指针，引用和取值  指针是一个存储计算机内存地址的变量，可以用引用表示计算机的内存地址；从指针指向的内存读取的数据成为指针的取值 指针可以指向某些具体类型的变量地址，例如int，long和double；指针也可以是void类型，NULL指针和未初始化指针 根据出现位置的不同，操作符*既可以用来声明一个指针变量，也可以用作当做指针的取值。当在声明一个变量时， *表示这里声明了一个指针。其他情况用 *表示指针的取值。 &amp;amp;是地址操作符，用来引用一个内存地址。通用在变量名字前使用&amp;amp;操作符，我们可以得到该内存的内存地址。  int *ptr;//声明一个int指针 int val=1;//声明一个int值 ptr=&amp;amp;val;//为指针分配一个int值的引用 int deref=*ptr; printf(&amp;#34;%d\n&amp;#34;,deref);//对指针进行取值,打印存储在指针地址中的内容 void指针，NULL指针和未初始化指针 一个指针可以被声明为void类型，比如void *x；一个指针可以被赋值为NULL；一个指针声明之后但没有被赋值，叫做未初始化指针
int *uninit;//int指针未初始化 int *nullptr=NULL;//初始化未NULL void *vptr;//void指针未初始化 int val=1; int *iptr; int *castptr; //void类型可以存储为任意类型的指针或者引用 iptr=&amp;amp;val; vptr=iptr; printf(&amp;#34;iptr=%p,vptr=%p\n&amp;#34;,iptr,vptr); //通过显式转换，可以把一个void指针转换为int指针，并取值 castptr=(int*)vptr; printf(&amp;#34;*castptr=%d\n&amp;#34;,*castptr); //打印null和未初始化指针 printf(&amp;#34;uninit=%p,nillptr=%p\n&amp;#34;,uninit,nullptr); 指针和数组 数组和指针不是同一种结构因此不可以相互转换，而数组变量指向了数组的第一个元素的内存地址；不能把指针赋值给数组变量，也不可以将一个数组变量赋值给另外一个数组，然而可以将一个数组变量赋值给指针。把数组变量赋值给指针的时候，实际上是把指向数组的第一个元素的地址赋给指针。
int array[4]={1,2,3,0}; int *ptr=array;//这个赋值与int *ptr=&amp;amp;array[0]效果相同；需要注意指针需要和数组的元素类型保持一致 指针和结构体 就像数组一样，指向结构体的指针存储了结构体第一个元素的内存地址。与数组指针一样，结构体的指针必须声明和结构体类型保持一致，或者声明为void类型。
struct person{ int age; char *name; }; struct person first; struct person *ptr; first.age=21; char *fullname=&amp;#34;full name&amp;#34;; first.name=fullname; ptr=&amp;amp;first; printf(&amp;#34;age=%d,name=%s\n&amp;#34;,first.</description>
    </item>
    
  </channel>
</rss>
